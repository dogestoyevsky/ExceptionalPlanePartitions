#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed May 17 14:25:17 2017

@author: hollymandel
"""

from sympy import *
import numpy as np
np.set_printoptions(threshold=1000000000)
import math as math
from IPython import embed
import symbolic_poset_functions

tableauIn = [1,1,1,2,2,2,2,2,1,1,1]
#tableauIn = [1,1,1,2,1,1,1]
maxRank = len(tableauIn)-1
#fullContentOrbits = [[7,1,1],[8,2,1]]
fullContentOrbits = [
        [11,1,1],
        [12,3,1],
        [12,12,1],
        [13,13,6],
        [14,7,2],
        [14,14,12],
        [15,15,13],
        [16,2,1],
        [16,4,1],
        [16,8,1],
        [16,16,4]]

#promotedOrbits = promoteOrbitsSymbolic(tableauIn,fullContentOrbits)

# decide which of the possible d divide m+11 
# say this step is done (including "propagating")
# assume  m > 5 so that all orbits promoted
m = Symbol('m',int=True)


true = []
powers = [2,4,8,16]
ones = [1]
# possible divisors
#[2 3 5 7 11 13]
loopId = 0
for x2 in range(0,4+1):
    for x3 in range(0,1+1):
        for x5 in range(0,1+1):
            for x7 in range(0,1+1):
                for x11 in range(0,1+1):
                    for x13 in range(0,1+1):
                        
                        collectPeriods = {}
                        rushShiPeriods = {}
                        dVals = []
                        
                        if x2 > 3:
                            dVals.append(16)
                        if x3 > 0 & x5 > 0:
                            dVals.append(15)
                        if x2 > 0 & x7 > 0:
                            dVals.append(14)
                        if x13 > 0:
                            dVals.append(13)
                        if x2 > 1 & x3 > 0:
                            dVals.append(12)
                        if x11 > 0:
                            dVals.append(11)
                        if x2 > 0 & x5 > 0:
                            dVals.append(10)
                        if x2 > 2:
                            dVals.append(8)
                        if x7 > 0:
                            dVals.append(7)
                        if x2 > 0 & x3 > 0:
                            dVals.append(6)
                        if x5 > 0:
                            dVals.append(5)
                        if x2 > 1 :
                            dVals.append(4)
                        if x3 > 0:
                            dVals.append(3)
                        if x2 > 0:
                            dVals.append(2)
                        dVals.append(1)          
                    
                        
                        for d in dVals:
                            [a,b,getRushShiPeriod] = symbolic_poset_functions.rushShiSymbolic(d,tableauIn)
                            rushShiPeriods[(m+maxRank+1)/d] = getRushShiPeriod
                                           
                        for t in range(0,len(fullContentOrbits)):
                            tau_f = fullContentOrbits[t][1]
                            numOrbits = fullContentOrbits[t][2]
                            origNumTableaux = {}
                            saveNumTableaux = {}
                            for s in range(0,len(dVals)):
                                d = dVals[s]
                                # compute number of content vectors
                                fcHt = fullContentOrbits[t][0]
                                if fcHt % d == 0:

                                    [numerator,denominator,quotient] = symbolic_poset_functions.rushShiSymbolic(d,np.ones([fcHt,1], dtype=int, order='C'))
                                    numerator = sympify(numerator)
                                    numerator = numerator.subs(m,m-(fcHt-(maxRank+1)))
                                    numTableaux =numerator/denominator
                                    origNumTableaux[d] = numTableaux
                                    for u in range(0,s):
                                        e = dVals[u]
                                        if fcHt % e == 0:
                                            if e % d == 0:
                                                numTableaux += -saveNumTableaux[e]
                        
                                    saveNumTableaux[d] = numTableaux
                                                  
                                    # compute resulting period
                                    tau_c = (m + maxRank + 1)/d
                                    period = (tau_f * tau_c)/int(gcd(int(fcHt/d),tau_f))
                                    
                                    # adding a step - need to add this tableaux to all of period N/f where 
                                    # f divides gcd(d,fcHt/tau_f)
                                    getGcd = int(gcd(d,int(fcHt/tau_f)))
                                    for u in range(1,getGcd+1):
                                        if getGcd % u == 0:
                                            periodPrime = period*u
                                            if periodPrime in collectPeriods.keys():
                                                collectPeriods[periodPrime] += tau_f*numOrbits*numTableaux
                                            else:
                                                collectPeriods[periodPrime] = tau_f*numOrbits*numTableaux
                             
                        
                        
                        for t in list(collectPeriods.keys()):
                            if t not in rushShiPeriods.keys():
                                rushShiPeriods[t] = 0  
                        
                        allTrue = 1
                        differences = {}
                        for t in list(collectPeriods.keys()):
                            differencesGet = rushShiPeriods[t] - collectPeriods[t]
                            differencesGet = sympify(differencesGet)
                            differencesGet = simplify(differencesGet)
                            differences[t] = differencesGet
                            if differences[t] != 0:
                                allTrue = 0
                                       
                        true += [ allTrue ]
                        
                        loopId += 1
                        print(loopId)

print(true)
        


